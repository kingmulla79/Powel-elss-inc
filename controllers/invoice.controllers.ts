require("dotenv").config({ quiet: true });
import { Request, Response, NextFunction } from "express";
import ErrorHandler from "../utils/Errorhandler";
import { CatchAsyncError } from "../middleware/CatchAsyncErrors";
import { logger } from "../utils/logger";
import {
  InvoiceDeleteService,
  InvoiceEditService,
  InvoiceFetchService,
  InvoiceGenerationService,
  PermanentInvoiceDeletionService,
} from "../services/invoice.services";
import cron from "node-cron";

export const InvoiceCreationController = CatchAsyncError(
  async (req: Request, res: Response, next: NextFunction) => {
    try {
      await InvoiceGenerationService(req.body);
      res.status(200).json({
        success: true,
        message: `New invoice generated`,
      });
      logger.info(`New invoice generated by user: ${req.user?.user_id}`);
    } catch (error: any) {
      if (error) {
        return next(new ErrorHandler(error.message, 500));
      }
    }
  }
);

export const InvoiceFetchController = CatchAsyncError(
  async (req: Request, res: Response, next: NextFunction) => {
    try {
      const invoiceData = await InvoiceFetchService();
      res.status(200).json({
        success: true,
        invoices: invoiceData,
        message: `Invoice data fetched`,
      });
      logger.info(`Invoice data fetched by user: ${req.user?.user_id}`);
    } catch (error: any) {
      if (error) {
        return next(new ErrorHandler(error.message, 500));
      }
    }
  }
);

export const InvoiceEditController = CatchAsyncError(
  async (req: Request, res: Response, next: NextFunction) => {
    try {
      await InvoiceEditService(req.body);
      res.status(200).json({
        success: true,
        message: `Invoice successfully edited`,
      });
      logger.info(
        `Invoice:${req.body.invoice_id} successfully edited by: ${req.user?.user_id}`
      );
    } catch (error: any) {
      if (error) {
        return next(new ErrorHandler(error.message, 500));
      }
    }
  }
);

export const InvoiceDeleteController = CatchAsyncError(
  async (req: Request, res: Response, next: NextFunction) => {
    try {
      const { invoice_id } = req.params;
      await InvoiceDeleteService(invoice_id);
      res.status(200).json({
        success: true,
        message: `Invoice: ${invoice_id} deleted successfully`,
      });
      logger.info(
        `Invoice: ${invoice_id} deleted successfully by: ${req.user?.user_id}`
      );
    } catch (error: any) {
      if (error) {
        return next(new ErrorHandler(error.message, 500));
      }
    }
  }
);

cron.schedule("0 0 * * *", async () => {
  await PermanentInvoiceDeletionService();
  logger.info("Removing deleted invoice", {
    action: "Invoice deletion",
    status: "success",
  });
  console.log("_____________");
  console.log("running cron: removing deleted invoices");
});
