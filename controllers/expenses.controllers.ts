require("dotenv").config({ quiet: true });
import { Request, Response, NextFunction } from "express";
import ErrorHandler from "../utils/Errorhandler";
import { CatchAsyncError } from "../middleware/CatchAsyncErrors";
import { logger } from "../utils/logger";

import {
  InvoiceDeleteService,
  InvoiceEditService,
} from "../services/invoice.services";
import {
  ExpenseFetchService,
  ExpenseGenerationService,
  ExpensesEditService,
} from "../services/expenses.services";

export const ExpensesGenerationController = CatchAsyncError(
  async (req: Request, res: Response, next: NextFunction) => {
    try {
      await ExpenseGenerationService(req.body);
      res.status(200).json({
        success: true,
        message: `New expense generated`,
      });
      logger.info(`New expense generated by user: ${req.user?.user_id}`);
    } catch (error: any) {
      if (error) {
        return next(new ErrorHandler(error.message, 500));
      }
    }
  }
);

export const ExpensesFetchController = CatchAsyncError(
  async (req: Request, res: Response, next: NextFunction) => {
    try {
      const expenseData = await ExpenseFetchService();
      res.status(200).json({
        success: true,
        expenses: expenseData,
        message: `Expense data fetched`,
      });
      logger.info(`Expense data fetched by user: ${req.user?.user_id}`);
    } catch (error: any) {
      if (error) {
        return next(new ErrorHandler(error.message, 500));
      }
    }
  }
);

export const ExpensesEditController = CatchAsyncError(
  async (req: Request, res: Response, next: NextFunction) => {
    try {
      await ExpensesEditService(req.body);
      res.status(200).json({
        success: true,
        message: `Expense successfully edited`,
      });
      logger.info(
        `Expense:${req.body.expense_id} successfully edited by: ${req.user?.user_id}`
      );
    } catch (error: any) {
      if (error) {
        return next(new ErrorHandler(error.message, 500));
      }
    }
  }
);

export const InvoiceDeleteController = CatchAsyncError(
  async (req: Request, res: Response, next: NextFunction) => {
    try {
      const { invoice_id } = req.params;
      await InvoiceDeleteService(invoice_id);
      res.status(200).json({
        success: true,
        message: `Invoice: ${invoice_id} deleted successfully`,
      });
      logger.info(
        `Invoice: ${invoice_id} deleted successfully by: ${req.user?.user_id}`
      );
    } catch (error: any) {
      if (error) {
        return next(new ErrorHandler(error.message, 500));
      }
    }
  }
);
